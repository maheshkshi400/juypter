
--JOINS 
USE JOINS
CREATE TABLE A(
ID INT
);
CREATE TABLE B(
ID INT
);
insert into A VALUES(1);
insert into A VALUES(1);
insert into A VALUES(2);
insert into A VALUES(3);
insert into A VALUES(4);
insert into A VALUES(NULL);
insert into A VALUES(NULL);

INSERT INTO B VALUES(1);
INSERT INTO B VALUES(2);
INSERT INTO B VALUES(3);
INSERT INTO B VALUES(3);
INSERT INTO B VALUES(NULL);

SELECT * FROM A;
SELECT * FROM B;

--SET OPERATIONS

--UNION
USE  JOINS
SELECT * FROM A UNION SELECT * FROM B;

--UNION ALL
SELECT * FROM A UNION ALL SELECT * FROM B;

--INTERSECT
SELECT * FROM A INTERSECT SELECT * FROM B;

--EXCEPT
SELECT * FROM A EXCEPT SELECT * FROM B;

USE JOINS
--INNER JOIN

SELECT * FROM A INNER JOIN B ON A.ID = B.ID;

--RIGHT OUTER JOIN
SELECT * FROM A;
SELECT * FROM B;
SELECT * FROM A RIGHT OUTER JOIN B ON A.ID = B.ID;

--LEFT OUTER JOIN

SELECT * FROM A LEFT OUTER JOIN B ON A.ID = B.ID;

--full outer join

SELECT * FROM A FULL OUTER JOIN B ON A.ID = B.ID;

--
USE EMPLOYEES
SELECT * FROM EMP2;
SELECT * FROM DEPT;
--inner join
SELECT E.empno,E.ename,E.job,E.mgr,E.hiredate,E.sal,E.comm,
D.dname,D.loc FROM EMP2 E INNER JOIN DEPT D ON E.deptno = D.deptno;

--SELF JOIN

SELECT E.EMPNO,E.ENAME FROM EMP2 E, EMP2 M WHERE E.MGR=M.EMPNO AND E.SAL > M.SAL;


--RIGHT OUTER JOIN 
SELECT E.EMPNO,E.ENAME,M.ENAME FROM EMP2 E RIGHT OUTER JOIN EMP2 M ON E.MGR=M.EMPNO;


--LEFT OUTER JOIN
SELECT E.EMPNO,E.ENAME AS EMPLOYEE ,ISNULL(M.ENAME,'BOSS') AS MANAGER FROM EMP2 E 
LEFT OUTER JOIN EMP2 M ON E.MGR=M.EMPNO;

--FIND OUT THE DUPLICATE
SELECT empno,COUNT(empno) FROM EMP2 GROUP BY empno HAVING COUNT(empno)>1;

--DELETE DUPLICATE
WITH DUPLICATE_CTE AS(
SELECT empno,COUNT(empno) FROM EMP2 GROUP BY empno HAVING (COUNT(empno)>1))

DELETE FROM EMP2 WHERE empno IN (SELECT empno FROM DUPLICATE_CTE);
 

--WINDOW FUNCTIONS
USE EMPLOYEES;
SELECT * FROM EMP2;

--RANK FUNCTION
SELECT EMPNO,ENAME,SAL,RANK() OVER(ORDER BY SAL DESC) AS RNK FROM EMP2;

--DENSE RANK FUNCTION
SELECT EMPNO,ENAME,SAL,DENSE_RANK() OVER(ORDER BY SAL DESC) AS RANK FROM EMP2;

SELECT * FROM (SELECT EMP2.*,DENSE_RANK() OVER (PARTITION BY deptno ORDER BY sal DESC) 
AS RNK FROM EMP2)  RANKED_EMPLOYEE WHERE RNK =1 ;

--ROW_NUMBER FUNCTION
SELECT EMPNO,ENAME,SAL,ROW_NUMBER() OVER(ORDER BY SAL DESC) AS RANK FROM EMP2;

--LEAD FUNCTION
USE SALES

-- CREATING TABLE

CREATE TABLE Quaterly_sales(Year INT,QuarterName VARCHAR(2),Sales INT);

--INSERT RECORDS INTO THE TABLE 

INSERT INTO Quaterly_sales VALUES(2018,'Q1',25000)
INSERT INTO Quaterly_sales VALUES(2018,'Q2',23000)
INSERT INTO Quaterly_sales VALUES(2018,'Q3',22000)
INSERT INTO Quaterly_sales VALUES(2018,'Q4',18000)
INSERT INTO Quaterly_sales VALUES(2019,'Q1',28000)
INSERT INTO Quaterly_sales VALUES(2019,'Q2',15000)
INSERT INTO Quaterly_sales VALUES(2019,'Q3',15000)
INSERT INTO Quaterly_sales VALUES(2019,'Q4',20000)

-- VERIFYING RECORDS IN THE TABLE

SELECT * FROM Quaterly_sales

-- LAG FUNCTION 
SELECT 
Year,
QuarterName as QUARTER,
Sales AS CURRENTSALE,
LAG(Sales) OVER (partition BY Year ORDER BY QuarterName) 
AS PREVIOUS_QTR_SALE
FROM Quaterly_sales

-- LEAD FUNCTION

SELECT 
Year,
QuarterName as QUARTER,
Sales AS CURRENTSALE,
LEAD(Sales) OVER (PARTITION BY Year ORDER BY QuarterName DESC) 
AS PREVIOUS_QTR_SALE
FROM Quaterly_sales;

USE SALES
--NTILE FUNCTION
SELECT EMPNO,ENAME,SAL,NTILE(2) OVER(ORDER BY SAL DESC) AS RANK FROM EMP2;

--CUME_DIST FUNCTION
SELECT EMPNO,ENAME,SAL,CUME_DIST() OVER(ORDER BY SAL DESC) AS RANK FROM EMP2;

--PERCENT_RANK FUNCTION
SELECT EMPNO,ENAME,SAL,PERCENT_RANK() OVER(ORDER BY SAL DESC) AS RANK FROM EMP2;

--NTILE FUNCTION
SELECT EMPNO,ENAME,SAL,NTILE(2) OVER(ORDER BY SAL DESC) AS RANK FROM EMP2;

--PARTITION BY 
SELECT EMPNO,ENAME,SAL,NTILE(2) OVER(PARTITION BY deptno ORDER BY sal DESC) AS RANK FROM EMP2;




--oprators
-- =
SELECT * FROM EMP2 WHERE empno=8000;
-- !=
SELECT * FROM EMP2 WHERE empno!=8000;
-- <>
SELECT * FROM EMP2 WHERE empno<>8000;
-- <
SELECT * FROM EMP2 WHERE sal<5000;
-- <=
SELECT * FROM EMP2 WHERE sal<=5000;
-- >
SELECT * FROM EMP2 WHERE sal>5000;
-- >=
SELECT * FROM EMP2 WHERE sal>=5000;
-- BETWEEN
SELECT * FROM EMP2 WHERE sal BETWEEN 5000 AND 10000;
-- LIKE
SELECT * FROM EMP2 WHERE ename LIKE 'A%';
-- IN
SELECT * FROM EMP2 WHERE sal IN (1000,5000);
-- IS NULL
SELECT * FROM EMP2 WHERE mgr IS NULL;
-- IS NOT NULL
SELECT * FROM EMP2 WHERE mgr IS NOT NULL;
-- AND
SELECT * FROM EMP2 WHERE sal>5000 AND deptno=10;
-- OR
SELECT * FROM EMP2 WHERE sal>5000 OR deptno=10;
-- NOT
SELECT * FROM EMP2 WHERE NOT sal>5000;
-- NULL
SELECT * FROM EMP2 WHERE mgr IS NULL;
-- NULL
SELECT * FROM EMP2 WHERE mgr IS NOT NULL;



--CASE STATEMENT
SELECT EMPNO,ENAME,SAL,
CASE
WHEN SAL>10000 THEN 'A'
WHEN SAL>5000 THEN 'B'
ELSE 'C'
END AS GRADE FROM EMP2;

--UPDATE WITH CASE STATEMENT
USE EMPLOYEES
ALTER TABLE EMP2 add BONUS decimal(10,2);
UPDATE EMP2 SET BONUS=
CASE
WHEN SAL>5000 THEN sal*0.1
WHEN SAL<5000 THEN 0.5
when SAL>=1000 and sal<3000 THEN 0.8
else sal*0.2
END;


SELECT * FROM EMP2;

--REFERENTIAL INTEGRITY --PAGENO.243
USE JOINS;

CREATE TABLE DEPT2(DEPTNO CHAR NOT NULL,DEPTNAME CHAR(25) NOT NULL,
LOC CHAR(25) NOT NULL
); 

ALTER TABLE DEPT2 ADD CONSTRAINT PK_DEPT PRIMARY KEY(DEPTNO);

CREATE TABLE EMP3(EMPNO INT NOT NULL,ENAME CHAR(25) NOT NULL,
JOB CHAR(25) NOT NULL,MGR INT,HIREDATE DATE,SAL DECIMAL(10,2),COMM INT, 
DEPTNO CHAR NOT NULL
);

ALTER TABLE EMP3 ADD CONSTRAINT PK_EMP PRIMARY KEY(EMPNO)

ALTER TABLE EMP3 ADD CONSTRAINT FK_EMP FOREIGN KEY(DEPTNO) REFERENCES DEPT2(DEPTNO);




 











