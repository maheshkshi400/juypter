--highest salary 

SELECT MAX(SAL) FROM EMPLOYEE.dbo.EMP2 --WHERE SAL < (SELECT MAX(SAL) FROM EMPLOYEE.dbo.EMP2);

--HIGHEST SALARY IN EACH DEPT

SELECT ename, sal, deptno
FROM EMPLOYEE.dbo.EMP2
WHERE SAL IN (SELECT MAX(sal) FROM EMPLOYEE.dbo.EMP2 GROUP BY deptno);

--by using dense rank

SELECT * FROM (SELECT *, DENSE_RANK() OVER (PARTITION BY deptno ORDER BY sal DESC) AS RNK 
FROM EMPLOYEE.dbo.EMP2) AS RESULT WHERE RNK=1;


--by using dense rank cte

WITH HIGH_RANK AS
(
SELECT *, DENSE_RANK() OVER (ORDER BY SAL DESC) AS RNK FROM EMPLOYEE.dbo.EMP2
)
SELECT * FROM HIGH_RANK WHERE RNK <= 5 --AND DEPTNO = 20;

--BY USING TOP 

SELECT TOP 1 SAL FROM(
SELECT DISTINCT TOP 1 SAL
FROM EMP5 
ORDER BY SAL DESC
)AS RASULT
ORDER BY SAL;

--FIND THE RANKING IN SALES DEPARTMENT

WITH CTE_EMP AS (
    SELECT 
        E.empno,
        E.ename,
        D.dname,
        DENSE_RANK() OVER (PARTITION BY D.dname ORDER BY E.sal DESC) AS rnk
    FROM EMPLOYEE.dbo.EMP2 E
    INNER JOIN DEPT D ON E.DEPTNO = D.DEPTNO
)
SELECT *
FROM CTE_EMP
WHERE rnk <= 5 AND dname = 'SALES';


SELECT DATEADD(MM,-3,GETDATE()) AS DATE



--CONSTRAINTS

USE  JOINS;

--PRIMARY KEY    --UNIQUE AND NOT NULL

CREATE TABLE PARENT (
    ID INT PRIMARY KEY,
    NAME VARCHAR(50)
);

INSERT PARENT VALUES(1, 'JOHN');
INSERT PARENT VALUES(2, 'SMITH');
INSERT PARENT VALUES(3, 'ALLEN');
INSERT PARENT VALUES(4, 'WARD');
INSERT PARENT VALUES(2, 'SMITH');

DROP TABLE PARENT;

--UNIQUE KEY  --NOT NULL BUT ALLOWS DUOLICATES

CREATE TABLE UNIQUE_KEY (
    ID INT UNIQUE,
    NAME VARCHAR(50)
);

INSERT UNIQUE_KEY VALUES(1, 'JOHN');
INSERT UNIQUE_KEY VALUES(2, 'SMITH');
INSERT UNIQUE_KEY VALUES(3, 'ALLEN');
INSERT UNIQUE_KEY VALUES(4, 'WARD');
INSERT UNIQUE_KEY VALUES(5, 'JONES');

DROP TABLE UNIQUE_KEY;

--NOT NULL

CREATE TABLE NOT_NULL (
    ID INT NOT NULL,
    NAME VARCHAR(50) NOT NULL
);

INSERT NOT_NULL VALUES(1, 'JOHN');
INSERT NOT_NULL VALUES(2, NULL);
INSERT NOT_NULL VALUES(3, 'ALLEN');
INSERT NOT_NULL VALUES(4, 'WARD');
INSERT NOT_NULL VALUES(NULL, NULL);

DROP TABLE NOT_NULL;


--CHECK CONSTRAINST

CREATE TABLE NSR (ID INT,NAME VARCHAR(20),SALARY MONEY CHECK (SALARY BETWEEN 5000 AND 50000));

INSERT NSR VALUES(1, 'JOHN', 6000);
INSERT NSR VALUES(2, 'SMITH', 8000);
INSERT NSR VALUES(3, 'ALLEN', 4000);
INSERT NSR VALUES(4, 'WARD', 7000);
INSERT NSR VALUES(5, 'JONES', 10000);
INSERT NSR VALUES(6, 'MARTIN', 6000);

DROP TABLE NSR;


--COMPOSITE PRIMARY KEY

CREATE TABLE COMPO (
    EMP_ID INT,
    DEPT_ID INT,
    EMPNAME VARCHAR(25),
    GENDER VARCHAR(6),
    SALARY INT,
    PRIMARY KEY (EMP_ID, DEPT_ID)
);

INSERT INTO COMPO
VALUES (101,001,'RAHUL','MALE',22000),
(102,002,'RAJ','MALE',25000),
(103,003,'PRIYANKA','FEMALE',25500),
(102,003,'VIJAY','MALE',25000),
(101,004,'SHWETA','FEMALE',22000),
(104,003,'SATYA','MALE',23000),
(105,005,'VIVEK','MALE',28000);
(NULL,009,'VISHKHA','FEMALE',28000);
(109,NULL,'VISHKHA','FEMALE',28000);

SELECT * FROM COMPO;

SELECT EMPNAME,SALARY FROM COMPO WHERE EMP_ID= 102 AND DEPT_ID =6;

DROP TABLE COMPO;

--CANDIDATE KEY

CREATE TABLE CANDIDATE_KEY (
    ID INT,
    NAME VARCHAR(50),
    DEPT VARCHAR(50),
    CONSTRAINT PK_CANDIDATE_KEY PRIMARY KEY (ID, NAME, DEPT)
);

INSERT CANDIDATE_KEY VALUES(1, 'JOHN', 'HR');
INSERT CANDIDATE_KEY VALUES(2, 'SMITH', 'SALES');
INSERT CANDIDATE_KEY VALUES(3, 'ALLEN', 'SALES');
INSERT CANDIDATE_KEY VALUES(4, 'WARD', 'HR');
INSERT CANDIDATE_KEY VALUES(5, 'JONES', 'MARKETING');

DROP TABLE CANDIDATE_KEY;   


--HOW TO ADD CONSTRAINSTO EXISTING TABLE

ALTER TABLE CANDIDATE_KEY ADD CONSTRAINT UQ_CANDIDATE_KEY UNIQUE (ID, NAME, DEPT);

--DELETE CONSTRAINST FROM EXISTING TABLE

ALTER TABLE CANDIDATE_KEY DROP CONSTRAINT UQ_CANDIDATE_KEY;


--FOREIGN KEY

CREATE TABLE Customers (
  CustomerID INT PRIMARY KEY,
  CustomerName VARCHAR(50) NOT NULL
);

CREATE TABLE Orders (
  OrderID INT PRIMARY KEY,
  OrderNumber INT NOT NULL,
  CustomerID INT,
  FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

INSERT INTO Customers (CustomerID, CustomerName)
VALUES (1, 'John'), (2, 'Jane'), (3, 'Bob');

INSERT INTO Orders (OrderID, OrderNumber, CustomerID)
VALUES (1, 101, 1), (2, 102, 2), (3, 103, 3);


--If a corresponding value in the foreign table doesnâ€™t exist, 
--a record in the child table cannot be inserted.


INSERT INTO Orders (OrderID, OrderNumber, CustomerID)
VALUES (4, 104, 4);

INSERT INTO Orders (OrderID, OrderNumber, CustomerID)
VALUES (4, 104, 1);

--When a record in the master table is 
--deleted and the corresponding record in the child table exists, 
--an error message is displayed and prevents the DELETE operation from going through.

DELETE FROM Customers WHERE CustomerID =3;



Types of Integrity Constraints
There are four types of integrity constraints which are:

Domain Constraints
Entity integrity Constraints
Key Constraints
Referential integrity constraintsTypes of Integrity Constraints
There are four types of integrity constraints which are:

--Domain Constraints
--Entity integrity Constraints
--Key Constraints
--Referential integrity constraints


--HOMEWORK  --REFERNTIAL INTEGRITY CONSTRAINT AND DELETE CASCADE













