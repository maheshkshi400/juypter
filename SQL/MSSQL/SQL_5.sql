CREATE TABLE [Order_Tbl](
 [ORDER_DAY] date,
 [ORDER_ID] varchar(10) ,
 [PRODUCT_ID] varchar(10) ,
 [QUANTITY] int ,
 [PRICE] int 
) 

INSERT INTO [Order_Tbl]  VALUES ('2015-05-01','ODR1', 'PROD1', 5, 5)
INSERT INTO [Order_Tbl]  VALUES ('2015-05-01','ODR2', 'PROD2', 2, 10)
INSERT INTO [Order_Tbl]  VALUES ('2015-05-01','ODR3', 'PROD3', 10, 25)
INSERT INTO [Order_Tbl]  VALUES ('2015-05-01','ODR4', 'PROD1', 20, 5)
INSERT INTO [Order_Tbl]  VALUES ('2015-05-02','ODR5', 'PROD3', 5, 25)
INSERT INTO [Order_Tbl]  VALUES ('2015-05-02','ODR6', 'PROD4', 6, 20)
INSERT INTO [Order_Tbl]  VALUES ('2015-05-02','ODR7', 'PROD1', 2, 5)
INSERT INTO [Order_Tbl]  VALUES ('2015-05-02','ODR8', 'PROD5', 1, 50)
INSERT INTO [Order_Tbl]  VALUES ('2015-05-02','ODR9', 'PROD6', 2, 50)
INSERT INTO [Order_Tbl]  VALUES ('2015-05-02','ODR10','PROD2', 4, 10)

--1.write an sql query to get all the products thaat got sold on both the 
--days and the number  of times the product is sold

SELECT PRODUCT_ID,COUNT(PRODUCT_ID) AS [COUNT],COUNT(DISTINCT ORDER_DAY)
FROM Order_Tbl GROUP BY PRODUCT_ID
HAVING COUNT(DISTINCT ORDER_DAY) >1;

-- write an sql query to get products that was ordered on 2-may-2015 but not on 01-may-2015

--USING SUBQUERY

SELECT DISTINCT(PRODUCT_ID) FROM Order_Tbl
WHERE ORDER_DAY = '2015-05-02' AND PRODUCT_ID NOT IN 
(SELECT PRODUCT_ID FROM Order_Tbl WHERE ORDER_DAY ='2015-05-01');

--USING JOIN


SELECT A.PRODUCT_ID,B.PRODUCT_ID
FROM(

(SELECT PRODUCT_ID FROM Order_Tbl WHERE ORDER_DAY= '2015-05-02') A

LEFT JOIN

(SELECT PRODUCT_ID FROM Order_Tbl WHERE ORDER_DAY= '2015-05-01') B

ON A.PRODUCT_ID=B.PRODUCT_ID)
WHERE b.PRODUCT_ID IS NULL

--USING EXCEPT QUERY

SELECT PRODUCT_ID FROM Order_Tbl WHERE ORDER_DAY= '2015-05-02'
EXCEPT
SELECT PRODUCT_ID FROM Order_Tbl WHERE ORDER_DAY= '2015-05-01'


--HIGHEST SOLD PRODUCTS (QUANTITY-PRICE) ON BOTH DAYS

SELECT A.ORDER_DAY, A.PRODUCT_ID, A.SOLD_AMT
FROM (
    (
    SELECT ORDER_DAY, PRODUCT_ID, QUANTITY * PRICE AS SOLD_AMT
    FROM Order_Tbl
    GROUP BY ORDER_DAY
) A
INNER JOIN 
(
    SELECT ORDER_DAY,PRODUCT_ID, QUANTITY * PRICE AS MAX_SOLD_AMT
    FROM Order_Tbl ) B
    ON A.ORDER_DAY = B.ORDER_DAY AND A.SOLD_AMT = B.MAX_SOLD_AMT;
)


SELECT A.ORDER_DAY, A.PRODUCT_ID, A.SOLD_AMT
FROM (
    SELECT ORDER_DAY, PRODUCT_ID, QUANTITY * PRICE AS SOLD_AMT
    FROM Order_Tbl
) A
INNER JOIN (
    SELECT ORDER_DAY, MAX(QUANTITY * PRICE) AS MAX_SOLD_AMT
    FROM Order_Tbl
    GROUP BY ORDER_DAY
) B ON A.ORDER_DAY = B.ORDER_DAY AND A.SOLD_AMT = B.MAX_SOLD_AMT;


--ALL PRODUCT TOTAL SALES OF BOTH DAYS ADJECENT TO EACH OTHER

SELECT PRODUCT_ID,
    SUM(ISNULL(Sales_01,0)) AS Total_sales_01,
    SUM(ISNULL(Sales_02,0)) AS Total_sales_02
FROM
(
    SELECT PRODUCT_ID,
        CASE WHEN ORDER_DAY = '2015-05-01' THEN Total_sales END AS Sales_01,
        CASE WHEN ORDER_DAY = '2015-05-02' THEN Total_sales END AS Sales_02
    FROM (
        SELECT ORDER_DAY, PRODUCT_ID, SUM(QUANTITY * PRICE) AS Total_sales
        FROM Order_Tbl
        GROUP BY ORDER_DAY, PRODUCT_ID
    ) A
) B
GROUP BY PRODUCT_ID;

--BY USING PIVOT

SELECT PRODUCT_ID,
    ISNULL([2015-05-01], 0) AS Total_sales_01,
    ISNULL([2015-05-02], 0) AS Total_sales_02
FROM (
    SELECT ORDER_DAY, PRODUCT_ID, SUM(QUANTITY * PRICE) AS Total_sales
    FROM Order_Tbl
    GROUP BY ORDER_DAY, PRODUCT_ID
) AS BASETABLE
PIVOT (
    SUM(Total_sales)
    FOR ORDER_DAY IN ([2015-05-01], [2015-05-02])
) AS PIVOT_TABLE;


--TO GET ALL HTE PRODUCT DAY WISE,THAT WAS ORDERED MORE THAN ONCE

SELECT ORDER_DAY, PRODUCT_ID, COUNT(*) --AS Order_Count
FROM Order_Tbl
GROUP BY ORDER_DAY, PRODUCT_ID
HAVING COUNT(*) > 1;

